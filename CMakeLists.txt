cmake_minimum_required(VERSION 2.4.6)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

# Set the build type.  Options are:
#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
#  Debug          : w/ debug symbols, w/o optimization
#  Release        : w/o debug symbols, w/ optimization
#  RelWithDebInfo : w/ debug symbols, w/ optimization
#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries
#set(ROS_BUILD_TYPE RelWithDebInfo)

rosbuild_init()

#set the default path for built executables to the "bin" directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#set the default path for built libraries to the "lib" directory
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

#uncomment if you have defined messages
rosbuild_genmsg()
#uncomment if you have defined services
#rosbuild_gensrv()

SET(
  CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake
)
include(cmake/FindMAVLINK.cmake)
include(cmake/FindGLIB2.cmake)
include(cmake/FindGTHREAD2.cmake)

FIND_PACKAGE(MAVLINK  REQUIRED)
FIND_PACKAGE(GLIB2  REQUIRED)
FIND_PACKAGE(GTHREAD2  REQUIRED)

# On mac use clang++
IF(${CMAKE_SYSTEM} MATCHES "Darwin-11.*")
    # Use clang++
    set(CMAKE_CXX_COMPILER /usr/bin/clang++)
    # Use clang
    set(CMAKE_C_COMPILER /usr/bin/clang)
ENDIF(${CMAKE_SYSTEM} MATCHES "Darwin-11.*")

#common commands for building c++ executables and libraries
#rosbuild_add_library(${PROJECT_NAME} src/example.cpp)
#target_link_libraries(${PROJECT_NAME} another_library)
#rosbuild_add_boost_directories()
#rosbuild_link_boost(${PROJECT_NAME} thread)

INCLUDE_DIRECTORIES(
  ${MAVLINK_INCLUDE_DIR}
  ${GLIB2_MAIN_INCLUDE_DIR}
  ${GLIB2_INTERNAL_INCLUDE_DIR}
  ${GTHREAD2_MAIN_INCLUDE_DIR}
  ../include/
)

rosbuild_add_executable(mavlink_ros_serial src/mavlink_ros_serial.cpp src/mavlink_ros_conversion.cpp src/serial_helpers.cpp)
target_link_libraries(mavlink_ros_serial
  ${GLIB2_LIBRARY}
  ${GTHREAD2_LIBRARY}
)

rosbuild_add_executable(mavlink_ros_udp src/mavlink_ros_udp.cpp)
target_link_libraries(mavlink_ros_udp
  ${GLIB2_LIBRARY}
  ${GTHREAD2_LIBRARY}
)
